SaldaeAnalyticsDashboard::run_app()
tisefka_iheggan
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
akka
akka
akka%>%dim()
aggreg_fun <- SA_aggregation_funs(aggregation_metric = NULL)
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
aggreg_fun <- SA_aggregation_funs(aggregation_metric = NULL)
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
aggreg_fun <- SA_aggregation_funs(aggregation_metric = NULL)
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
aggreg_fun <- SA_aggregation_funs(aggregation_metric = NULL)
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
aggreg_fun <- SA_aggregation_funs(aggregation_metric = NULL)
aggreg_fun
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
aggreg_fun22
tisefka_iheggan <- akka
aggreg_fun
input <- list()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
akkin
SaldaeDataExplorer::anomaly_detection_nnegh(akkin,target_ts = "pop",anomaly_mode = "anomalize")
akkin
View(SaldaeDataExplorer::anomaly_detection_nnegh)
tisefka <- akkin
tisefka[,target_ts] <-purrr::map_df(tisefka[,target_ts],~interp_na_value(ts_x = .x,interp_mode = "spline"))
akkin
target_ts <- "pop"
tisefka[,target_ts] <-purrr::map_df(tisefka[,target_ts],~interp_na_value(ts_x = .x,interp_mode = "spline"))
source('~/Saldae Platform/SaldaeDataExplorer/R/anomaly_detection_module.R')
tisefka <- purrr::map(.x = target_ts, ~anomaly_detection_yiwen(tisefka = tisefka[,c("date",.x)],anomaly_mode = anomaly_mode))%>%
stats::setNames(target_ts)
anomaly_mode <- "anomalize"
tisefka[,target_ts] <-purrr::map_df(tisefka[,target_ts],~interp_na_value(ts_x = .x,interp_mode = "spline"))
interp_na_value <-SaldaeDataExplorer:::interp_na_value
tisefka[,target_ts] <-purrr::map_df(tisefka[,target_ts],~interp_na_value(ts_x = .x,interp_mode = "spline"))
tisefka
tisefka <- tisefka[,c("date",target_ts)]
tisefka <- purrr::map(.x = target_ts, ~anomaly_detection_yiwen(tisefka = tisefka[,c("date",.x)],anomaly_mode = anomaly_mode))%>%
stats::setNames(target_ts)
target_ts
source('~/Saldae Platform/SaldaeDataExplorer/R/anomaly_detection_module.R')
anomaly_detection_yiwen <-SaldaeDataExplorer:::anomaly_detection_yiwen
anomaly_detection_yiwen
tisefka
View(anomaly_detection_yiwen)
tisefka2
tisefka <- tisefka2
if (anomaly_mode == "auto") {
if (nrow(tisefka) <= 2000) anomaly_mode <- "anomalize"
if (nrow(tisefka) > 2000) anomaly_mode <- "twitter"
}
target_variable <- colnames(tisefka)[colnames(tisefka)!="date"]
target_variable
tisefka <- tisefka%>%anomalize::time_decompose(!!target_variable) %>%
anomalize::anomalize(remainder)%>%
anomalize::clean_anomalies()
tisefka%>%anomalize::time_decompose(!!target_variable)
?anomalize::time_decompose
source('~/Saldae Platform/SaldaeDataExplorer/R/anomaly_detection_module.R')
tisefka%>%anomalize::time_decompose(target_variable)
source('~/Saldae Platform/SaldaeDataExplorer/R/anomaly_detection_module.R')
source('~/Saldae Platform/SaldaeDataExplorer/R/anomaly_detection_module.R')
install.packages("anomalize")
install.packages("anomalize")
tisefka%>%anomalize::time_decompose(!!target_variable)
library(dplyr)
data(tidyverse_cran_downloads)
library("anomalize")
library(dplyr)
data(tidyverse_cran_downloads)
tidyverse_cran_downloads
# Basic Usage
tidyverse_cran_downloads %>%
time_decompose(count, method = "stl")
tidyverse_cran_downloads %>%
time_decompose(count,
method       = "twitter",
frequency    = "1 week",
trend        = "2 months",
merge        = TRUE,
message      = FALSE)
tisefka%>%anomalize::time_decompose(!!target_variable)
tisefka
tisefka$date
class(tisefka$date)
tisefka$date%>%unique()
tisefka$date%>%unique()%>%length()
tisefka$date%>%length()
source('~/Saldae Platform/SaldaeDataExplorer/R/anomaly_detection_module.R')
tisefka%>%anomalize::time_decompose(!!target_variable, method = "stl")
class(tisefka)
tisefka
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library("dplyr")
SaldaeAnalyticsDashboard::run_app()
?prophet:::set_date
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
library(SaldaeModulesUI)
?bs4Dash::infoBox
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
library(SaldaeModulesUI)
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library("shiny")
?selectInput
source('~/Saldae Platform/SaldaeModulesUI/R/tisefka_UI.R')
library(SaldaeModulesUI)
?shinyWidgets::multiInput
library("shiny")
library("shinyWidgets")
# simple use
ui <- fluidPage(
multiInput(
inputId = "id", label = "Fruits :",
choices = c("Banana", "Blueberry", "Cherry",
"Coconut", "Grapefruit", "Kiwi",
"Lemon", "Lime", "Mango", "Orange",
"Papaya"),
selected = "Banana", width = "350px"
),
verbatimTextOutput(outputId = "res")
)
server <- function(input, output, session) {
output$res <- renderPrint({
input$id
})
}
shinyApp(ui = ui, server = server)
# with options
ui <- fluidPage(
multiInput(
inputId = "id", label = "Fruits :",
choices = c("Banana", "Blueberry", "Cherry",
"Coconut", "Grapefruit", "Kiwi",
"Lemon", "Lime", "Mango", "Orange",
"Papaya"),
selected = "Banana", width = "400px",
options = list(
enable_search = FALSE,
non_selected_header = "Choose between:",
selected_header = "You have selected:"
)
),
verbatimTextOutput(outputId = "res")
)
server <- function(input, output, session) {
output$res <- renderPrint({
input$id
})
}
shinyApp(ui = ui, server = server)
}
library(SaldaeModulesUI)
?shinyWidgets::pickerInput
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
View(SaldaeForecasting::Saldae_Forecaster)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
View(SaldaeDataExplorer::data_diagnosis_f)
library(readr)
micro_economics <- read_csv("~/Training_materials/data_source/micro_economics.csv")
View(micro_economics)
unique(micro_economics$Security)
unique(micro_economics$Security)%>%length()
library(dplyr)
unique(micro_economics$Security)%>%length()
output_data_quality <- list()
tisefka <- micro_economics
output_data_quality[["diagnosis"]]    <- dlookr::diagnose(.data = tisefka)
output_data_quality[["beschreibung"]] <- dlookr::describe(.data = tisefka)
output_data_quality[["outliers"]]     <- dlookr::diagnose_outlier(.data = tisefka)
output_data_quality$diagnosis
output_data_quality$diagnosis
#----------------------------- afe-d ukuden yeddan akk d ukud_unit
categoricals <- output_data_quality$diagnosis%>%dplyr::filter(unique_count < 120 & unique_count > 1)
categoricals
#----------------------------- afe-d ukuden yeddan akk d ukud_unit
categoricals <- output_data_quality$diagnosis%>%dplyr::filter(unique_count < 120 & unique_count > 1)%>%dplyr::pull(variables)
categoricals
#----------------------------- afe-d ukuden yeddan akk d ukud_unit
categoricals <- output_data_quality$diagnosis%>%dplyr::filter(unique_count < 120 & unique_count > 1 | types == character)%>%dplyr::pull(variables)
#----------------------------- afe-d ukuden yeddan akk d ukud_unit
categoricals <- output_data_quality$diagnosis%>%dplyr::filter(unique_count < 120 & unique_count > 1 | types == "character")%>%dplyr::pull(variables)
categoricals
#----------------------------- afe-d ukuden yeddan akk d ukud_unit
categoricals <- output_data_quality$diagnosis%>%dplyr::filter(unique_count < 100 & unique_count > 1 | types == "character")%>%dplyr::pull(variables)
categoricals
library(SaldaeModulesUI)
?bs4Dash::infoBoxOutput
library(SaldaeModulesUI)
observeEvent(eventExpr=tisefka_tables(),handlerExpr= {
purrr::map(names(tisefka_plots()), ~{
output_name_plot <- paste0("tisefka_plot_", .x)
output_name_table <- paste0("tisefka_table_", .x)
output_name_figures <- paste0("tisefka_key_figures_", .x)
output[[output_name_table]] <- DT::renderDataTable(tisefka_tables()[[.x]])
output[[output_name_plot]] <- plotly::renderPlotly(tisefka_plots()[[.x]])
my_analytics_key_values()[[.x]]%>%sapply(function(.y){
output_name_figures_single <- paste0(output_name_figures,"_",.y)
output[[output_name_figures_single]] <- bs4Dash::renderInfoBox({
my_title <- paste(.x,":",input$SA_key_figure_select[1])
bs4Dash::infoBox(title = my_title,
value = .y,color = "maroon",
width = 6,
shiny::icon("bar-chart")
)
})
})
#
})
})
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
View(SaldaeDataExplorer::gemmu_yellan_f)
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
kk$tisefka_tizegzawin
kk$tisefka_overview$x
kk$tisefka_overview
kk$non_numeric_variables
kk$categoricals_unique_values
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
kk
library(SaldaeModulesUI)
?    kk <<- tisefka_tizegzawin()
?shinyhelper::helper
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
?fluidRow
?bs4Dash::box
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
?shinyWidgets::downloadBttn
library(SaldaeModulesUI)
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
aa$numeric_variables
aa$non_numeric_variables
aa$categoricals_unique_values
View(SaldaeDataExplorer::data_diagnosis_f)
tisefka <- aa$tisefka_tizegzawin
output_data_quality <- list()
output_data_quality[["diagnosis"]]    <- dlookr::diagnose(.data = tisefka)
output_data_quality[["beschreibung"]] <- dlookr::describe(.data = tisefka)
output_data_quality[["outliers"]]     <- dlookr::diagnose_outlier(.data = tisefka)
output_data_quality$diagnosis%>%dplyr::filter(types %in%c("character","factor", "POSIXct"))
output_data_quality$diagnosis
output_data_quality[["categoricals"]] <- output_data_quality$diagnosis%>%dplyr::filter(types %in%c("character","factor", "POSIXct")||unique_count < 100)%>%dplyr::pull(variables)
output_data_quality[["categoricals"]]
output_data_quality$diagnosis
output_data_quality$diagnosis%>%dplyr::filter(types %in%c("character","factor", "POSIXct")|unique_count < 100)
output_data_quality$diagnosis
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
?shinyalert::shinyalert
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
icon("fas fa-share-alt")
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
?shinyWidgets::actionBttn
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
?actionButton
?downloadButton
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
?bs4Dash::tabBox
if(interactive()){
library(shiny)
library(bs4Dash)
shinyApp(
ui = dashboardPage(
header = dashboardHeader(),
sidebar = dashboardSidebar(),
controlbar = dashboardControlbar(),
footer = dashboardFooter(),
title = "Bootstrap 4 tabsetPanel",
body = dashboardBody(
# manually inserted panels
tabsetPanel(
id = "tabcard",
tabPanel(
title = "Tab 1",
"Content 1"
),
tabPanel(
title = "Tab 2",
"Content 2"
),
tabPanel(
title = "Tab 3",
"Content 3"
)
),
br(), br(),
# programmatically inserted panels
tabsetPanel(
id = "tabset",
.list = lapply(1:3, function(i) {
tabPanel(
title = paste0("Tab", i),
active = FALSE,
paste("Content", i)
)
})
)
)
),
server = function(input, output) {}
)
# update tabsetPanel
shinyApp(
ui = dashboardPage(
title = "updateTabsetPanel",
header = dashboardHeader(),
body = dashboardBody(
tabsetPanel(
id = "tabset1",
selected = "Tab 2",
tabPanel(
title = "Tab 1",
numericInput("val", "Value:", 10, min = 1, max = 100),
verbatimTextOutput("value")
),
tabPanel(
title = "Tab 2",
"Content 2"
),
tabPanel(
title = "Tab 3",
checkboxGroupInput(
inline = TRUE,
"variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")
),
tableOutput("data")
)
),
uiOutput("tabSetPanel2")
),
sidebar = dashboardSidebar(
skin = "light",
sliderInput(
inputId = "controller",
label = "Update the first tabset",
min = 1,
max = 3,
value = 2
),
br(),
sliderInput(
inputId = "controller2",
label = "Update the second tabset",
min = 1,
max = 3,
value = 3
)
),
controlbar = dashboardControlbar(collapsed = FALSE),
footer = dashboardFooter()
),
server = function(input, output, session) {
output$tabSetPanel2 <- renderUI({
tabsetPanel(
id = "tabset2",
tabPanel(
title = "Tab 1",
p("Tab 1 ")
),
tabPanel(
title = "Tab 2",
p("Tab 2")
),
tabPanel(
title = "Tab 3",
p("Tab 3")
)
)
})
# update tabset1
observeEvent(input$controller, {
updateTabsetPanel(
session,
inputId = "tabset1",
selected = paste("Tab", input$controller)
)
}, ignoreInit = TRUE)
# update tabset 2
observeEvent(input$controller2, {
updateTabsetPanel(
session,
inputId = "tabset2",
selected = paste("Tab", input$controller2)
)
}, ignoreInit = TRUE)
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
output$txt <- renderText({
paste("You chose", input$rb)
})
output$value <- renderText({ input$val })
}
)
}
?tabPanel
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
?bs4Dash::tabsetPanel
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
library(bs4Dash)
SaldaeAnalyticsDashboard::run_app()
?shinyalert::shinyalert
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
shiny::icon("fas fa-chart-bar")
?bs4Dash::infoBox
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
?shinyalert::shinyalert
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
library(SaldaeModulesUI)
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeModulesUI)
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
